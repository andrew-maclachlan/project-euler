"""Problem 12: Highly divisible triangular number

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle
number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
Let us list the factors of the first seven triangle numbers:

1: 1
3: 1, 3
6: 1, 2, 3, 6
10: 1, 2, 5, 10
15: 1, 3, 5, 15
21: 1, 3, 7, 21
28: 1, 2, 4, 7, 14, 28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over n divisors?
"""

from .common_functions import all_prime_factors


def divisible_triangle_number(n) -> int:
    """Return the lowest triangle number with over n divisors.
    """
    max_divisors = 0
    i = 0
    triangle_number = 0
    while max_divisors <= n:
        i += 1
        triangle_number += i
        divisor_count = 1

        prime_factors = all_prime_factors(triangle_number)
        for number in set(prime_factors):
            divisor_count *= prime_factors.count(number) + 1

        if divisor_count > max_divisors:
            max_divisors = divisor_count

    return triangle_number
